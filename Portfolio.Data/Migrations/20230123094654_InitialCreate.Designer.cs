// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portfolio.DataAccess.Context;

#nullable disable

namespace Portfolio.DataAccess.Migrations
{
    [DbContext(typeof(PortfolioContext))]
    [Migration("20230123094654_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Portfolio.Entities.Content", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<bool?>("InShowCase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("contentName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("imagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("99");

                    b.HasKey("id");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Portfolio.Entities.ContentDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("contentDetailName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("contentId")
                        .HasColumnType("int");

                    b.Property<string>("imagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("99");

                    b.HasKey("id");

                    b.HasIndex("contentId");

                    b.ToTable("ContentDetails");
                });

            modelBuilder.Entity("Portfolio.Entities.Image", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("contentDetailId")
                        .HasColumnType("int");

                    b.Property<string>("imgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("contentDetailId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Portfolio.Entities.Message", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool?>("isRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("messageContent")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("senderMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("senderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Portfolio.Entities.Service", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("iconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<short>("rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("99");

                    b.Property<string>("serviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Portfolio.Entities.Settings", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("aboutContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("aboutHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("aboutImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("facebookUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("facebookVisibility")
                        .HasColumnType("bit");

                    b.Property<string>("instagramUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("instagramVisibility")
                        .HasColumnType("bit");

                    b.Property<string>("seo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sliderHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sliderImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sliderServices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slogan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("timedMessage")
                        .HasColumnType("bit");

                    b.Property<string>("twitterUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("twitterVisibility")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            id = 1,
                            aboutContent = "about me text",
                            aboutHeader = "aboutheader",
                            aboutImgPath = "imgpathabout",
                            facebookUrl = "facebook.com",
                            facebookVisibility = true,
                            instagramUrl = "instagram.com",
                            instagramVisibility = true,
                            seo = "<meta description='Perfect website'>",
                            sliderHeader = "slider header",
                            sliderImgPath = "sliderimgpath",
                            sliderServices = "service area",
                            slogan = "just do it",
                            timedMessage = true,
                            twitterUrl = "twitter.com",
                            twitterVisibility = true
                        });
                });

            modelBuilder.Entity("Portfolio.Entities.Skill", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<short>("rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("99");

                    b.Property<string>("skillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("skillPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)20);

                    b.HasKey("id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Portfolio.Entities.ContentDetail", b =>
                {
                    b.HasOne("Portfolio.Entities.Content", "content")
                        .WithMany("Details")
                        .HasForeignKey("contentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("content");
                });

            modelBuilder.Entity("Portfolio.Entities.Image", b =>
                {
                    b.HasOne("Portfolio.Entities.ContentDetail", "contentDetail")
                        .WithMany("images")
                        .HasForeignKey("contentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contentDetail");
                });

            modelBuilder.Entity("Portfolio.Entities.Content", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Portfolio.Entities.ContentDetail", b =>
                {
                    b.Navigation("images");
                });
#pragma warning restore 612, 618
        }
    }
}
